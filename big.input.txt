let pair: [ 
  let integer:int;
  let character:char;
];

let acme:[2] [
  let employees: [2] [ let age:int; ];
];

let fibonacci:[8][3]int;

//-------------------------------

function p(): void {}

function f(r:number, e:int):int {
  let real:number;
  let c:char;
  let result:int;
  real = r * 10.0;
  c = '0';
  if (e < 256) {
    c = (e as char);
    result = (c as int);
  }
  else 
    result = (real as int);
  return result;
}

function initialize(): void {
  let i:int;
  fibonacci[0][0] = 0;
  fibonacci[0][1] = 1;
  fibonacci[0][2] = 1;
  i = 1;
  while (i < 8) {
    fibonacci[i][0] = fibonacci[i - 1][1];
    fibonacci[i][1] = fibonacci[i - 1][2];
    fibonacci[i][2] = fibonacci[i][0] + fibonacci[i][1];
    i = i + 1;
  }
}

//-------------------------------

function main(): void{
  let i, j:int;
  p();
  i=0;
  pair.character='0';
  pair.integer=('0' as int);

  // Shows 48 (decimal value of '0')
  log f((i as number), (pair.character as int)), '\n';
  f(1.3, 2); 

  initialize(); 
  i = 0;
  while (i < 8) {
    // Shows the Fib sequence, from 1 to 8 (34)
    log '(', i + 1, ')', fibonacci[i][0], 
          '+', fibonacci[i][1] , '=' ,
          fibonacci[i][2] , '\n';
    i = i + 1;
  }

  acme[1].employees[1].age = 56;
  // Shows 56
  log acme[1].employees[1].age, '\n';
  i = 0;
  while (i < 2) {
    j = 0;
    while (j<2) {
      acme[i].employees[j].age = i + j;
      j = j+ 1;
    }
    i= i + 1;
  }

  i = 0;
  while (i<2) {
    j = 0;
    while (j<2) {
      // Shows 0 1 1 2
      log acme[i].employees[j].age, ' ';
      j = j+ 1;
    }
    i= i + 1;
  }
}